#VRML_SIM R2021b utf8
# license: Copyright Cyberbotics Ltd. Licensed for use only with Webots.
# license url: https://cyberbotics.com/webots_assets_license
# tags: static
# Generic and customizable stairs model.

PROTO RollerConveyor [
  field SFVec3f    translation       0 0 0
  field SFRotation rotation          1 0 0 -1.5707953
  field SFString   name              "RollerConveyor"
  field SFFloat    conveyorLength    0.980001    # horizontal length of roller conveyor
  field SFFloat    heightDifference  0.5         # vertical difference of end and start
  field SFFloat    rollerLength      0.25
  field SFFloat    rollerRadius      0.015
  field SFFloat    rollerDistance    0.05        # horizontal distance between two rollers
  field SFFloat    sideRailsHeight   0.1
  field SFFloat    sideRailsWidth    0.01
  field SFString   contactMaterial   "RollerConveyor"
]
{
Solid {
  translation IS translation
  rotation IS rotation
  name IS name
  children [    
%{ 
  local conveyorLength = fields.conveyorLength.value
  local heightDifference = fields.heightDifference.value
  local conveyorLength = fields.conveyorLength.value
  local rollerLength = fields.rollerLength.value
  local rollerRadius = fields.rollerRadius.value
  local rollerDistance = fields.rollerDistance.value
  local sideRailsHeight = fields.sideRailsHeight.value
  local sideRailsWidth = fields.sideRailsWidth.value
  local nRollers = math.floor((conveyorLength-2*rollerRadius) / rollerDistance )
  local alpha = math.atan(heightDifference / conveyorLength)
  for n=0,nRollers do
}%
    Transform {
      translation %{= n*rollerDistance+rollerRadius }% 0 %{= (n*rollerDistance+rollerRadius)/conveyorLength*heightDifference }%
      children [
        Shape {
          appearance PBRAppearance {
            roughness 0.5
          }
          geometry Cylinder {
            height IS rollerLength
            radius IS rollerRadius
          }
        }
      ]
    }

%{
  end
}%
    DEF BOUNDING Group {
      children [
        Transform {
          translation %{= conveyorLength/2 }% 0 %{= heightDifference/2 }%
          rotation 0 1 0 1.5708
          children [
            Shape {
              appearance PBRAppearance {
                transparency 1.0
              }
              geometry TexturedParallelepiped {
                size %{= rollerRadius*2/math.cos(alpha) }% %{= rollerLength }% %{= math.sqrt(conveyorLength*conveyorLength+heightDifference*heightDifference) }%
                angles 1.57079632679 0 %{= - alpha }%
              }
            }
          ]
        }
%{
  for n=-1,1,2 do 
}%
        Transform {
          translation %{= conveyorLength/2 }% %{= n*(rollerLength+sideRailsWidth)/2 }% %{= (heightDifference+sideRailsHeight)/2 }%
          rotation 0 1 0 1.5708
          children [
            Shape {
              appearance PBRAppearance {
                roughness 0.5
              }
              geometry TexturedParallelepiped {
                size %{= rollerRadius*2/math.cos(alpha)+sideRailsHeight }% %{= sideRailsWidth }% %{= math.sqrt(conveyorLength*conveyorLength+heightDifference*heightDifference) }%
                angles 1.57079632679 0 %{= - alpha }%
              }
            }
          ]
        }
%{
  end
}%
      ]
    }
  ]
  boundingObject USE BOUNDING
  contactMaterial IS contactMaterial
}
}